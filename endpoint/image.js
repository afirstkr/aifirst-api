// Generated by CoffeeScript 2.1.0
(function() {
  'use strict';
  var UPLOAD_PATH, acl, aws, bucket, express, fs, image, multer, promise, sharp, tms, upload, uploadToS3;

  //#################################################
  // init
  //#################################################
  express = require('express');

  image = express.Router();

  tms = require('../helper/tms');

  acl = require('../helper/acl');

  multer = require('multer');

  upload = multer({
    dest: 'upload/'
  });

  sharp = require('sharp');

  promise = require('bluebird');

  UPLOAD_PATH = __dirname + '/../upload/';

  //#################################################
  // upload AWS S3
  //#################################################
  aws = require('aws-sdk');

  fs = require('fs');

  aws.config.update({
    accessKeyId: IAM.ACCESS,
    secretAccessKey: IAM.SECRET,
    region: IAM.REGION
  });

  bucket = new aws.S3({
    params: {
      Bucket: IAM.BUCKET,
      ACL: 'public-read',
      ContentType: 'image/jpeg'
    }
  });

  uploadToS3 = function(filename, cb) {
    var params;
    params = {
      Key: filename,
      Body: fs.createReadStream(UPLOAD_PATH + filename)
    };
    return bucket.upload(params).send(cb);
  };

  //#####################################################################
  // REST API
  //#####################################################################
  image.post('/', tms.verifyToken);

  image.post('/', upload.any('image'));

  image.post('/', function(req, res) {
    if (!req.files) {
      return res.status(400).json({
        data: RCODE.IMAGE_REQUIRED
      });
    }
    if (req.files.length < 1) {
      return res.status(400).json({
        data: RCODE.IMAGE_REQUIRED
      });
    }
    return promise.map(req.files, function(file) {
      // resize
      return sharp(UPLOAD_PATH + file.filename).resize(RESIZE.W, RESIZE.H).max().jpeg().toFile(UPLOAD_PATH + file.filename + RESIZE.EXT).then(function() {
        return new promise(function(resolve, reject) {
          return uploadToS3(file.filename + RESIZE.EXT, function(err, data) {
            if (err) {
              reject(err);
            }
            fs.unlink(UPLOAD_PATH + file.filename + RESIZE.EXT, function(err) {
              if (err) {
                return reject(err);
              }
            });
            return resolve();
          });
        });
      // resize thumbnail
      }).then(function() {
        return sharp(UPLOAD_PATH + file.filename).resize(RESIZE.THUMB_W, RESIZE.THUMB_H).toFile(UPLOAD_PATH + file.filename + RESIZE.THUMB_EXT).then(function() {
          return new promise(function(resolve, reject) {
            return uploadToS3(file.filename + RESIZE.THUMB_EXT, function(err, data) {
              if (err) {
                reject(err);
              }
              fs.unlink(UPLOAD_PATH + file.filename + RESIZE.THUMB_EXT, function(err) {
                if (err) {
                  return reject(err);
                }
              });
              fs.unlink(UPLOAD_PATH + file.filename, function(err) {
                if (err) {
                  return reject(err);
                }
              });
              return resolve();
            });
          });
        });
      });
    }).then(function() {
      var file, i, len, ref, url;
      if (APP.S3_PROXY) {
        url = APP.URL + '/image/';
      } else {
        url = 'https://' + IAM.BUCKET + '.s3-' + IAM.REGION + '.amazonaws.com/';
      }
      ref = req.files;
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        file.url = url + file.filename + RESIZE.EXT;
        file.urlThumb = url + file.filename + RESIZE.THUMB_EXT;
        return res.json({
          data: req.files
        });
      }
    }).catch(function(err) {
      return res.status(500).json({
        data: RCODE.SERVER_ERROR
      });
    });
  });

  image.get('/:filename', function(req, res) {
    var url;
    if (!req.params.filename) {
      return res.status(400).json({
        data: RCODE.FILENAME_REQUIRED
      });
    }
    if (APP.S3_PROXY) {
      res.type('jpeg');
      return bucket.getObject({
        Key: req.params.filename
      }).createReadStream().pipe(res);
    } else {
      url = 'https://' + IAM.BUCKET + '.s3-' + IAM.REGION + '.amazonaws.com/' + req.params.filename;
      return res.redirect(url);
    }
  });

  module.exports = image;

}).call(this);

//# sourceMappingURL=image.js.map
