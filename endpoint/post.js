// Generated by CoffeeScript 2.1.0
(function() {
  'use strict';
  var acl, express, post, tms, validator;

  express = require('express');

  validator = require('validator');

  tms = require('../helper/tms');

  acl = require('../helper/acl');

  post = express.Router();

  //#####################################################################
  // REST API
  //#####################################################################
  post.post('/', tms.verifyToken);

  post.post('/', async function(req, res) {
    var err, param, sql;
    if (!req.body.channelID) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    if (!req.body.email) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    if (!req.body.userName) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    if (!req.body.title) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    if (!req.body.html) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    try {
      sql = 'insert into post set ?';
      param = {
        channelID: req.body.channelID,
        email: req.body.email,
        userName: req.body.userName,
        title: req.body.title,
        html: req.body.html
      };
      post = (await pool.query(sql, param));
      return res.json({
        data: post.insertId
      });
    } catch (error) {
      err = error;
      log('err=', err);
      return res.status(500).json({
        data: RCODE.SERVER_ERROR
      });
    }
  });

  post.get('/', async function(req, res) {
    var channelID, err, offset, page, pages, param, result, size, sql, total;
    if (!req.query.page) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    if (!req.query.size) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    if (!req.query.preset) {
      return res.status(400).json({
        data: RCODE.INVALID_PARAMS
      });
    }
    try {
      switch (req.query.preset) {
        case 'NOTICE_DEFAULT':
          channelID = 'notice';
          break;
        default:
          return res.status(400).json({
            data: RCODE.INVALID_PARAMS
          });
      }
      sql = 'select count(*) as total from post where channelID=?';
      param = [channelID];
      total = (await pool.query(sql, param));
      total = total[0].total;
      size = parseInt(req.query.size);
      page = parseInt(req.query.page);
      pages = Math.ceil(total / size);
      offset = (page - 1) * size;
      result = {
        meta: {
          total: total,
          pages: pages,
          size: size,
          page: page,
          offset: offset
        }
      };
      sql = 'select * from post where channelID=? order by createdAt desc limit ?,?';
      param = [channelID, offset, size];
      post = (await pool.query(sql, param));
      result.data = post;
      return res.status(200).json(result);
    } catch (error) {
      err = error;
      log('err=', err);
      return res.status(500).json({
        data: RCODE.SERVER_ERROR
      });
    }
  });

  post.get('/:id', async function(req, res) {
    var err, param, sql;
    try {
      sql = 'select * from post where postID=?';
      param = [req.params.id];
      post = (await pool.query(sql, param));
      if (post.length < 1) {
        return res.status(400).json({
          data: RCODE.NO_RESULT
        });
      }
      return res.json({
        data: post[0]
      });
    } catch (error) {
      err = error;
      log('err=', err);
      return res.status(500).json({
        data: RCODE.SERVER_ERROR
      });
    }
  });

  post.put('/:postID', async function(req, res) {
    var err, param, sets, sql;
    try {
      sets = {};
      if (req.body.tag) {
        sets.tag = req.body.tag;
      }
      if (req.body.title) {
        sets.title = req.body.title;
      }
      if (req.body.html) {
        sets.html = req.body.html;
      }
      if (Object.keys(sets).length === 0) {
        return res.status(400).json({
          data: RCODE.INVALID_PARAMS
        });
      }
      sql = 'update post set ? where postID=?';
      param = [sets, req.params.postID];
      await pool.query(sql, param);
      sql = 'select * from post where postID=?';
      param = [req.params.postID];
      post = (await pool.query(sql, param));
      return res.json({
        data: post[0]
      });
    } catch (error) {
      err = error;
      log('err=', err);
      return res.status(500).json({
        data: RCODE.SERVER_ERROR
      });
    }
  });

  post.delete('/:postID', async function(req, res) {
    var err, param, sql;
    try {
      sql = 'delete from post where postID=?';
      param = [req.params.postID];
      await pool.query(sql, param);
      return res.json({
        data: req.params.postID
      });
    } catch (error) {
      err = error;
      log('err=', err);
      return res.status(500).json({
        data: RCODE.SERVER_ERROR
      });
    }
  });

  module.exports = post;

}).call(this);

//# sourceMappingURL=post.js.map
